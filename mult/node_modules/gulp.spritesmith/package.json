{
  "name": "gulp.spritesmith",
  "description": "Convert a set of images into a spritesheet and CSS variables via gulp",
  "version": "2.5.1",
  "homepage": "https://github.com/twolfson/gulp.spritesmith",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/gulp.spritesmith.git"
  },
  "bugs": {
    "url": "https://github.com/twolfson/gulp.spritesmith/issues"
  },
  "licenses": [
    {
      "type": "UNLICENSE",
      "url": "https://github.com/twolfson/gulp.spritesmith/blob/master/UNLICENSE"
    }
  ],
  "main": "lib/gulp-spritesmith",
  "engines": {
    "node": ">= 0.9.0"
  },
  "scripts": {
    "precheck": "twolfson-style precheck docs/ lib/ test/",
    "lint": "twolfson-style lint docs/ lib/ test/",
    "pretest": "twolfson-style install",
    "test": "npm run precheck && cd test && mocha . --timeout 60000 && cd .. && npm run lint"
  },
  "dependencies": {
    "gulp-util": "~2.2.14",
    "spritesheet-templates": "~8.2.0",
    "spritesmith": "~1.1.0",
    "through2": "~0.6.1",
    "underscore": "~1.6.0",
    "url2": "~1.0.0"
  },
  "devDependencies": {
    "gulp": "~3.5.2",
    "gulp-csso": "~0.2.9",
    "gulp-imagemin": "~1.0.1",
    "js-yaml": "~3.2.3",
    "jscs": "~1.8.1",
    "jshint": "~2.5.10",
    "mocha": "~1.11.0",
    "phantomjssmith": "~0.5.4",
    "pngparse": "~2.0.1",
    "rimraf": "~2.2.6",
    "twolfson-style": "~1.6.0"
  },
  "keywords": [
    "gulpplugin",
    "spritesmith",
    "sprite",
    "spritesheet"
  ],
  "readme": "# gulp.spritesmith [![Build status](https://travis-ci.org/twolfson/gulp.spritesmith.png?branch=master)](https://travis-ci.org/twolfson/gulp.spritesmith)\n\nConvert a set of images into a spritesheet and CSS variables via [gulp][]\n\nThis is the official port of [grunt-spritesmith][], the [grunt][] equivalent of a wrapper around [spritesmith][].\n\n[gulp]: http://gulpjs.com/\n[grunt-spritesmith]: https://github.com/Ensighten/grunt-spritesmith\n[grunt]: http://gruntjs.com/\n[spritesmith]: https://github.com/Ensighten/spritesmith\n\n![Example input/output](docs/example.png)\n\nAlternative output formats include [SASS, Stylus, LESS, and JSON][css-formats].\n\n[css-formats]: #spritesmithparams\n\n### Do you like `gulp.spritesmith`?\n[Support us via gratipay][gratipay] or [spread word on Twitter][twitter]\n\n[gratipay]: https://gratipay.com/twolfson/\n[twitter]: https://twitter.com/intent/tweet?text=CSS%20sprites%20made%20easy%20via%20gulp.spritesmith&url=https%3A%2F%2Fgithub.com%2Ftwolfson%2Fgulp.spritesmith&via=twolfsn\n\n## Breaking changes in 2.0.0\nWe have moved to `pixelsmith` as the default `engine`. It is `node` based and should support your sprites. Any other engines must be installed outside of `spritesmith`. This will lead to cleaner and faster installations.\n\nWe have moved to `binary-tree` as the default `algorithm`. We changed this to give the best possible packing out of the box. If you were using `top-down` as the default, please specify it in your configuration.\n\nWe have moved the `cssClass` option for the `css` template to `cssSelector`. This makes it more semantically appropriate and eaiser to find.\n\n## Getting Started\nInstall the module with: `npm install gulp.spritesmith`\n\n```js\nvar gulp = require('gulp');\nvar spritesmith = require('gulp.spritesmith');\n\ngulp.task('sprite', function () {\n  var spriteData = gulp.src('images/*.png').pipe(spritesmith({\n    imgName: 'sprite.png',\n    cssName: 'sprite.css'\n  }));\n  spriteData.pipe(gulp.dest('path/to/output/'));\n});\n```\n\n### Continuing the pipeline\nIn addition to the `spriteData` stream, we offer individual streams for images and CSS. This allows for image optimization and CSS minification.\n\n```js\nvar gulp = require('gulp');\nvar csso = require('gulp-csso');\nvar imagemin = require('gulp-imagemin');\nvar spritesmith = require('gulp.spritesmith');\n\ngulp.task('sprite', function () {\n  // Generate our spritesheet\n  var spriteData = gulp.src('images/*.png').pipe(spritesmith({\n    imgName: 'sprite.png',\n    cssName: 'sprite.css'\n  }));\n\n  // Pipe image stream through image optimizer and onto disk\n  spriteData.img\n    .pipe(imagemin())\n    .pipe(gulp.dest('path/to/image/folder/'));\n\n  // Pipe CSS stream through CSS optimizer and onto disk\n  spriteData.css\n    .pipe(csso())\n    .pipe(gulp.dest('path/to/css/folder/'));\n});\n```\n\n## Documentation\n`gulp.spritesmith` presents the `spritesmith` function as its `module.exports`.\n\n### `spritesmith(params)`\n[gulp][] plugin that returns a [transform stream][] with 2 [readable stream][] properties.\n\nThe input/output streams interact with [vinyl-fs][] objects which are [gulp's][gulp] format of choice.\n\n[transform stream]: http://nodejs.org/api/stream.html#stream_class_stream_transform\n[readable stream]: http://nodejs.org/api/stream.html#stream_class_stream_readable\n[vinyl-fs]: https://github.com/wearefractal/vinyl-fs\n\n- params `Object` - Container for `gulp.spritesmith` parameters\n    - imgName `String` - Filename to save image as\n        - Supported image extensions are `.png` and `.jpg/jpeg` (limited to specfic engines)\n        - Image format can be overridden via `imgOpts.format`\n    - cssName `String` - Filename to save CSS as\n        - Supported CSS extensions are `.css` (CSS), `.sass` ([SASS][]), `.scss` ([SCSS][]), `.less` ([LESS][]), `.styl/.stylus` ([Stylus][]), and `.json` ([JSON][])\n        - CSS format can be overridden via `cssFormat`\n    - imgPath `String` - Optional path to use in CSS referring to image location\n    - padding `Number` - Optional amount of pixels to include between images\n        - By default we use no padding between images (`0`)\n        - An example usage can be found in the [Examples section](#padding)\n    - algorithm `String` - Optional method for how to pack images\n        - By default we use `binary-tree`, which packs images as efficiently as possible\n        - An example usage can be found in the [Examples section](#algorithm)\n        - More information can be found in the [Algorithms section](#algorithms)\n    - algorithmOpts `Object` - Options to pass through to algorithm\n        - For example we can skip sorting in some algorithms via `{algorithmOpts: {sort: false}}`\n          - This is useful for sprite animations\n      - See your algorithm's documentation for available options\n          - https://github.com/twolfson/layout#algorithms\n    - engine `String` - Optional image generating engine to use\n        - By default we use `pixelsmith`, a `node` based engine that supports all common image formats\n        - Alternative engines must be installed via `npm install`\n        - An example usage can be found in the [Examples section](#engine)\n        - More information can be found in the [Engines section](#engines)\n    - engineOpts `Object` - Options to pass through to engine for settings\n        - For example `phantomjssmith` accepts `timeout` via `{engineOpts: {timeout: 10000}}`\n      - See your engine's documentation for available options\n    - imgOpts `Object` - Options to pass through to engine uring export\n        - For example `gmsmith` supports `quality` via `{imgOpts: {quality: 75}}`\n        - See your engine's documentation for available options\n    - cssFormat `String` - CSS format to use\n        - By default this is the format inferred by `cssName's` extension\n            - For example `.styl -> stylus`\n        - For more format options, see our formatting library\n            - https://github.com/twolfson/spritesheet-templates#templates\n    - cssTemplate `String|Function` - CSS template to use for rendering output CSS\n        - This overrides `cssFormat`\n        - If a `String` is provided, it must be a path to a [mustache][] template\n            - An example usage can be found in the [Examples section](#mustache-template)\n        - If a `Function` is provided, it must have a signature of `function (params)`\n            - An example usage can be found in the [Examples section](#template-function)\n        - For more templating information, see the [Templating section](#templating)\n    - cssVarMap `Function` - Mapping function for each filename to CSS variable\n        - For more information, see [Variable mapping](#variable-mapping)\n    - cssSpritesheetName `String` - Name to use for spritesheet related variables in preprocessor templates\n    - cssOpts `Object` - Options to pass through to templater\n        - For example `{cssOpts: {functions: false}}` skips output of mixins\n        - See your template's documentation for available options\n            - https://github.com/twolfson/spritesheet-templates#templates\n\n[SASS]: http://sass-lang.com/\n[SCSS]: http://sass-lang.com/\n[sass-maps]: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps\n[LESS]: http://lesscss.org/\n[Stylus]: http://learnboost.github.com/stylus/\n[JSON]: http://json.org/\n[mustache]: http://mustache.github.io/\n\n**Returns**:\n- spriteData [`stream.Transform`][transform stream] - Stream that outputs image and CSS as [vinyl-fs][] objects\n- spriteData.img [`stream.Readable`][readable stream] - Stream for image output as a [vinyl-fs][] object\n- spriteData.css [`stream.Readable`][readable stream] - Stream for CSS output as a [vinyl-fs][] object\n\n### Algorithms\nImages can be laid out in different fashions depending on the algorithm. We use [`layout`][] to provide you as many options as possible. At the time of writing, here are your options for `algorithm`:\n\n[`layout`]: https://github.com/twolfson/layout\n\n|         `top-down`        |          `left-right`         |         `diagonal`        |           `alt-diagonal`          |          `binary-tree`          |\n|---------------------------|-------------------------------|---------------------------|-----------------------------------|---------------------------------|\n| ![top-down][top-down-img] | ![left-right][left-right-img] | ![diagonal][diagonal-img] | ![alt-diagonal][alt-diagonal-img] | ![binary-tree][binary-tree-img] |\n\n[top-down-img]: https://raw.githubusercontent.com/twolfson/layout/2.0.2/docs/top-down.png\n[left-right-img]: https://raw.githubusercontent.com/twolfson/layout/2.0.2/docs/left-right.png\n[diagonal-img]: https://raw.githubusercontent.com/twolfson/layout/2.0.2/docs/diagonal.png\n[alt-diagonal-img]: https://raw.githubusercontent.com/twolfson/layout/2.0.2/docs/alt-diagonal.png\n[binary-tree-img]: https://raw.githubusercontent.com/twolfson/layout/2.0.2/docs/binary-tree.png\n\nMore information can be found in the [`layout`][] documentation:\n\nhttps://github.com/twolfson/layout\n\n### Templating\nThe `cssTemplate` option allows for using a custom template. An example template can be found at:\n\nhttps://github.com/twolfson/spritesheet-templates/blob/4.2.0/lib/templates/stylus.template.mustache\n\nThe parameters passed into your template are known as `params`. We add some normalized properties via [`spritesheet-templates`][] for your convenience.\n\n- params `Object` Container for parameters\n    - items `Object[]` - Array of sprite information\n        - name `String` - Name of the sprite file (sans extension)\n        - x `Number` - Horizontal position of sprite's left edge in spritesheet\n        - y `Number` - Vertical position of sprite's top edge in spritesheet\n        - width `Number` - Width of sprite\n        - height `Number` - Height of sprite\n        - total_width `Number` - Width of entire spritesheet\n        - total_height `Number` - Height of entire spritesheet\n        - image `String` - Relative URL path from CSS to spritesheet\n        - escaped_image `String` - URL encoded `image`\n        - source_image `String` - Path to the original sprite file\n        - offset_x `Number` - Negative value of `x`. Useful to `background-position`\n        - offset_y `Number` - Negative value of `y`. Useful to `background-position`\n        - px `Object` - Container for numeric values including `px`\n            - x `String` - `x` suffixed with `px`\n            - y `String` - `y` suffixed with `px`\n            - width `String` - `width` suffixed with `px`\n            - height `String` - `height` suffixed with `px`\n            - total_width `String` - `total_width` suffixed with `px`\n            - total_height `String` - `total_height` suffixed with `px`\n            - offset_x `String` - `offset_x` suffixed with `px`\n            - offset_y `String` - `offset_y` suffixed with `px`\n    - spritesheet `Object` - Information about spritesheet\n        - width `Number` - Width of entire spritesheet\n        - total_height `Number` - Height of entire spritesheet\n        - image `String` - Relative URL path from CSS to spritesheet\n        - escaped_image `String` - URL encoded `image`\n        - px `Object` - Container for numeric values including `px`\n            - width `String` - `width` suffixed with `px`\n            - height `String` - `height` suffixed with `px`\n    - spritesheet_name `String` - Prefix for spritesheet variables\n    - options `Object` - Options passed in via `cssOpts` in `grunt-spritesmith` config\n\n[`spritesheet-templates`]: https://github.com/twolfson/spritesheet-templates\n\nAn example sprite `item` is\n\n```js\n{\n  \"name\": \"sprite2\",\n  \"x\": 10,\n  \"y\": 20,\n  \"width\": 20,\n  \"height\": 30,\n  \"total_width\": 80,\n  \"total_height\": 100,\n  \"image\": \"nested/dir/spritesheet.png\",\n  \"escaped_image\": \"nested/dir/spritesheet.png\",\n  \"source_image\": \"path/to/original/sprite.png\",\n  \"offset_x\": -10,\n  \"offset_y\": -20,\n  \"px\": {\n    \"x\": \"10px\",\n    \"y\": \"20px\",\n    \"width\": \"20px\",\n    \"height\": \"30px\",\n    \"total_width\": \"80px\",\n    \"total_height\": \"100px\",\n    \"offset_x\": \"-10px\",\n    \"offset_y\": \"-20px\"\n  }\n}\n```\n\nExample usages can be found as:\n\n- [Mustache template](#mustache-template)\n- [Template function](#template-function)\n\n#### Variable mapping\nThe `cssVarMap` option allows customization of the CSS variable names\n\n> If you would like to customize CSS selectors in the `css` template, please see https://github.com/twolfson/spritesheet-templates#css\n\nYour `cssVarMap` should be a function with the signature `function (sprite)`. It will receive the same parameters as `items` from [Templating](#templating) except for `escaped_image`, `offset_x`,` offset_y`, and `px`.\n\n```js\n// Prefix all sprite names with `sprite-` (e.g. `home` -> `sprite-home`)\ncssVarMap: function (sprite) {\n  sprite.name = 'sprite_' + sprite.name;\n}\n\n// Generates:\n// $sprite_fork_x = 0px;\n// $sprite_fork_y = 0px;\n\n// As oppposed to default:\n// $fork_x = 0px;\n// $fork_y = 0px;\n```\n\n### Engines\nAn engine can greatly improve the speed of your build (e.g. `canvassmith`) or support obscure image formats (e.g. `gmsmith`).\n\nAll `spritesmith` engines adhere to a common specification and test suite:\n\nhttps://github.com/twolfson/spritesmith-engine-test\n\nBelow is a list of known engines with their tradeoffs:\n\n#### pixelsmith\n[`pixelsmith`][] is a `node` based engine that runs on top of [`get-pixels`][] and [`save-pixels`][].\n\n[`pixelsmith`]: https://github.com/twolfson/pixelsmith\n[`get-pixels`]: https://github.com/mikolalysenko/get-pixels\n[`save-pixels`]: https://github.com/mikolalysenko/save-pixels\n\n**Key differences:** Doesn't support uncommon image formats (e.g. `tiff`) and not as fast as a compiled library (e.g. `canvassmith`).\n\n#### phantomjssmith\n[`phantomjssmith`][] is a [phantomjs][] based engine. It was originally built to provide cross-platform compatibility but has since been succeeded by [`pixelsmith`][].\n\n**Requirements:** [phantomjs][] must be installed on your machine and on your `PATH` environment variable. Visit [the phantomjs website][phantomjs] for installation instructions.\n\n**Key differences:** `phantomjs` is cross-platform and supports all image formats.\n\n[`phantomjssmith`]: https://github.com/twolfson/phantomjssmith\n[phantomjs]: http://phantomjs.org/\n\n#### canvassmith\n[`canvassmith`][] is a [node-canvas][] based engine that runs on top of [Cairo][].\n\n**Requirements:** [Cairo][] and [node-gyp][] must be installed on your machine.\n\nInstructions on how to install [Cairo][] are provided in the [node-canvas wiki][].\n\n[node-gyp][] should be installed via `npm`:\n\n```bash\nnpm install -g node-gyp\n```\n\n**Key differences:** `canvas` has the best performance (useful for over 100 sprites). However, it is `UNIX` only.\n\n[`canvassmith`]: https://github.com/twolfson/canvassmith\n[node-canvas]: https://github.com/learnboost/node-canvas\n[Cairo]: http://cairographics.org/\n[node-canvas wiki]: (https://github.com/LearnBoost/node-canvas/wiki/_pages\n[node-gyp]: https://github.com/TooTallNate/node-gyp/\n\n#### gmsmith\n[`gmsmith`][] is a [`gm`][] based engine that runs on top of either [Graphics Magick][] or [Image Magick][].\n\n**Requirements:** Either [Graphics Magick][] or [Image Magick][] must be installed on your machine.\n\nFor the best results, install from the site rather than through a package manager (e.g. `apt-get`). This avoids potential transparency issues which have been reported.\n\n[Image Magick][] is implicitly discovered. However, you can explicitly use it via `engineOpts`\n\n```js\n{\n  engineOpts: {\n    imagemagick: true\n  }\n}\n```\n\n**Key differences:** `gmsmith` allows for configuring image quality whereas others do not.\n\n[`gmsmith`]: https://github.com/twolfson/gmsmith\n[`gm`]: https://github.com/aheckmann/gm\n[Graphics Magick]: http://www.graphicsmagick.org/\n[Image Magick]: http://imagemagick.org/\n\n## Examples\n### Algorithm\nIn this example, we are using the `alt-diagonal` algorithm to guarantee no overlap if images overflow.\n\n**Configuration:**\n\n```js\n{\n  imgName: 'sprite.png',\n  cssName: 'sprite.styl',\n  algorithm: 'alt-diagonal'\n}\n```\n\n**Output:**\n\n![algorithm spritesheet](docs/examples/algorithm/sprite.png)\n\n### Engine\nIn this example, we are using the `phantomjssmith` engine as an alternative to the `pixelsmith` default.\n\n**Requirements:**\n\nInstall `phantomjssmith` to our `node_modules` via `npm install`.\n\n```bash\nnpm install phantomjssmith\n```\n\nAlternatively, we can use `--save` or `--save-dev` to save to our `package.json's dependencies` or `devDependenices`.\n\n```bash\nnpm install phantomjssmith --save  # Updates {\"dependencies\": {\"phantomjssmith\": \"1.2.3\"}}\nnpm install phantomjssmith --save-dev  # Updates {\"devDependencies\": {\"phantomjssmith\": \"1.2.3\"}}\n```\n\n**Configuration:**\n\n```js\n// var phantomjssmith = require('phantomjssmith');\n{\n  imgName: 'sprite.png',\n  cssName: 'sprite.styl',\n  engine: phantomjssmith\n}\n```\n\n**Output:**\n\n![engine spritesheet](docs/examples/engine/sprite.png)\n\n### Padding\nThe `padding` option allows for inserting spacing between images.\n\n**Configuration:**\n\n```js\n{\n  imgName: 'sprite.png',\n  cssName: 'sprite.styl',\n  padding: 20 // Exaggerated for visibility, normal usage is 1 or 2\n}\n```\n\n**Output:**\n\n![padding spritesheet](docs/examples/padding/sprite.png)\n\n\n### Mustache template\nIn this example, we will use `cssTemplate` with a `mustache` template to generate CSS that uses `:before` selectors.\n\n**Template:**\n\n```mustache\n{{#items}}\n.icon-{{name}}:before {\n  display: block;\n  background-image: url({{{escaped_image}}});\n  background-position: {{px.offset_x}} {{px.offset_y}};\n  width: {{px.width}};\n  height: {{px.height}};\n}\n{{/items}}\n```\n\n**Configuration:**\n\n```js\n{\n  imgName: 'sprite.png',\n  cssName: 'sprite.css',\n  cssTemplate: 'mustacheStr.css.mustache'\n}\n```\n\n**Output:**\n\n```css\n.icon-fork:before {\n  display: block;\n  background-image: url(sprite.png);\n  background-position: 0px 0px;\n  width: 32px;\n  height: 32px;\n}\n.icon-github:before {\n/* ... */\n```\n\n### Template function\nIn this example, we will use `cssTemplate` with a custom function that generates YAML.\n\n**Configuration:**\n\n```js\n// var yaml = require('js-yaml');\n{\n  imgName: 'sprite.png',\n  cssName: 'sprite.yml',\n  cssTemplate: function (params) {\n    // Convert items from an array into an object\n    var itemObj = {};\n    params.items.forEach(function (item) {\n      // Grab the name and store the item under it\n      var name = item.name;\n      itemObj[name] = item;\n\n      // Delete the name from the item\n      delete item.name;\n    });\n\n    // Return stringified itemObj\n    return yaml.safeDump(itemObj);\n  }\n}\n```\n\n**Output:**\n\n```yaml\nfork:\n  x: 0\n  \"y\": 0\n  width: 32\n  height: 32\n  source_image: /home/todd/github/gulp.spritesmith/docs/images/fork.png\n  image: sprite.png\n  total_width: 64\n  total_height: 64\n  escaped_image: sprite.png\n  offset_x: -0.0\n  offset_y: -0.0\n  px:\n    x: 0px\n    \"y\": 0px\n    offset_x: 0px\n    offset_y: 0px\n    height: 32px\n    width: 32px\n    total_height: 64px\n    total_width: 64px\ngithub:\n# ...\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via `npm run lint` and test via `npm test`.\n\n## Attribution\nGitHub and Twitter icons were taken from [Alex Peattie's JustVector Social Icons][justvector].\n\nFork designed by [P.J. Onori][onori] from The Noun Project.\n\n[justvector]: http://alexpeattie.com/projects/justvector_icons/\n[noun-fork-icon]: http://thenounproject.com/noun/fork/#icon-No2813\n[onori]: http://thenounproject.com/somerandomdude\n\n## Unlicense\nAs of Feb 09 2014, Todd Wolfson has released this repository and its contents to the public domain.\n\nIt has been released under the [UNLICENSE][].\n\n[UNLICENSE]: UNLICENSE\n",
  "readmeFilename": "README.md",
  "_id": "gulp.spritesmith@2.5.1",
  "dist": {
    "shasum": "2fc641cabcd8bbbbfe1f86d5b2630bf34e7eb2c6"
  },
  "_from": "gulp.spritesmith@^2.4.0",
  "_resolved": "https://registry.npmjs.org/gulp.spritesmith/-/gulp.spritesmith-2.5.1.tgz"
}
